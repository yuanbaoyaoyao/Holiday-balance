{"version":3,"sources":["lunar_calendar.js","utils.js","solar_term.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["const { base64ToBit, checkDate } = require('./utils');\nconst { getSolarTerm } = require('./solar_term');\n\nconst table = [];\nconst heavenlyStemStr = '甲乙丙丁戊己庚辛壬癸';\nconst earthlyBranchStr = '子丑寅卯辰巳午未申酉戌亥';\nconst zodiacStr = '鼠牛虎兔龙蛇马羊猴鸡狗猪';\nconst lunarMonthStr = '正二三四五六七八九十冬腊';\nconst nubmerStr = '一二三四五六七八九十';\n\nfunction decompressData() {\n    const base64Str = 'hLaCVwUrqpNDSYNlUaqgrUE1pJXQSuak2FJoaSrqlC1QNailtBK26TcElwpLWyWDUoNqJW1ArYJVySXgkuzJYNSg6lVtSC1oFbHJuCS58loZKhqU20oLVQVqSq2BLoSWlkrCpV7SoNlBaqqrUE2gpbNSuClcVKg6VBqpq1QVaglslK4KVwUmPpMGyrrVQVqCW1UroJWhSamk0NJY1ShaoFtTS2glbBJtKS4Ul1ZLBqUG1GraBVsEq6pLwSXBks2pQdSw1lBawKtlk2hJcGSyalQ1KDaUlqoK1PVbAl0JLVyVhUqFpSWqgrVlVqCXQUtspXBSsKk0dKg1UFapJtQS2alcFJwaTL0mDVMFqja1BLbaV0ErQpNbSWGkoapLtUC1oFbSStgk29JcKSwqlW1KDaQVtGq2CTeEl4JLgyWzUoOpQaqSrYFVwSXHkuDJZ9SoalBtKq1UFagptRS6ClsVKwqVC0prVQVqgq0lLoKWwUrOpODSbuUwaqCtVU2oJbBSuik4NFo6TBqkG1TNagVtBK5KToUWhoqWyUNUg';\n    const bitStr = base64ToBit(base64Str);\n    let solarDate = { y: 1900, m: 1, d: 31, obj: new Date(1900, 0, 31, 0, 0, 0, 0) };\n    let heavenlyStem = 6; // 天干\n    let earthlyBranch = 0; // 地支\n    for (let i = 0; i < bitStr.length; ) {\n        if (i + 16 >= bitStr.length) {\n            break;\n        }\n        const head = bitStr.substr(i, 4);\n        i += 4;\n        const leapMonth = +`0b${head}`;\n        const monthCount = leapMonth > 0 ? 13 : 12;\n        const months = bitStr.substr(i, monthCount).split('').map(o => +o);\n        i += monthCount;\n\n        table.push({\n            solarDate,\n            leapMonth,\n            months,\n            heavenlyStem,\n            earthlyBranch\n        });\n\n        const dateCount = monthCount*29 + months.filter(o => o == 1).length;\n        const newSolarDate = new Date(solarDate.y, solarDate.m - 1, solarDate.d + dateCount, 0, 0, 0, 0);\n        solarDate = {\n            y: newSolarDate.getFullYear(),\n            m: newSolarDate.getMonth() + 1,\n            d: newSolarDate.getDate(),\n            obj: newSolarDate\n        };\n        heavenlyStem = (heavenlyStem + 1) % 10;\n        earthlyBranch = (earthlyBranch + 1) % 12;\n    }\n}\n\ndecompressData();\n\nfunction isBefore(base, target) {\n    if (base.y != target.y) {\n        return base.y > target.y;\n    } else if (base.m != target.m) {\n        return base.m > target.m;\n    } else if (base.d != target.d) {\n        return base.d > target.d;\n    }\n    return false;\n}\n\nfunction getLunarStr(month, date, isLeap) {\n    const monthStr = `${isLeap ? '闰' : ''}${lunarMonthStr[month - 1]}月`;\n    if (date <= 10) {\n        return `${monthStr}初${nubmerStr[date - 1]}`;\n    } else if (date < 20) {\n        return `${monthStr}十${nubmerStr[date - 11]}`;\n    } else if (date == 20) {\n        return `${monthStr}廿十`;\n    } else if (date > 20) {\n        return `${monthStr}廿${nubmerStr[date - 21]}`;\n    } else {\n        return `${monthStr}三十`;\n    }\n}\n\nfunction getLunar(year, month, date) {\n    year = Math.floor(+year);\n    month = Math.floor(+month);\n    date = Math.floor(+date);\n    checkDate(year, month, date);\n    let index = year - 1900;\n    let row = table[index];\n    if (isBefore(row.solarDate, { y: year, m: month, d: date })) {\n        index -= 1;\n        row = table[index];\n    }\n    if (!row) {\n        throw new Error('Invalid Date');\n    }\n    const targetDate = new Date(year, month - 1, date, 0, 0, 0, 0);\n    let delta = Math.round((targetDate.getTime() - row.solarDate.obj.getTime()) / (24*60*60*1000));\n    let afterLeap = false;\n    for(let i = 0; i < row.months.length; i++) {\n        const isLeap = row.leapMonth > 0 && i == row.leapMonth;\n        if (isLeap) {\n            afterLeap = true;\n        }\n        const days = 29 + row.months[i];\n        if (delta < days) {\n            let lunarMonth = afterLeap ? i : i + 1;\n            return {\n                lunarMonth,\n                lunarDate: delta + 1,\n                isLeap,\n                solarTerm: getSolarTerm(year, month, date),\n                lunarYear: `${heavenlyStemStr[row.heavenlyStem]}${earthlyBranchStr[row.earthlyBranch]}年`,\n                zodiac: `${zodiacStr[row.earthlyBranch]}`,\n                dateStr: getLunarStr(lunarMonth, delta + 1, isLeap)\n            };\n        } else {\n            delta -= days;\n        }\n    }\n    throw new Error(`There's something wrong!`);\n}\n\nmodule.exports = { getLunar };\n","function base64ToBit(base64Str) {\n    const base64CodeMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    const result = [];\n    for (let i = 0; i < base64Str.length; i++) {\n        let n = base64CodeMap.indexOf(base64Str[i]);\n        result.push(n.toString(2).padStart(6, '0'));\n    }\n    return result.join('');\n}\n\nfunction checkDate(year, month, date) {\n    if (year < 1901 || year > 2100) {\n        throw new Error('Invalid Year');\n    }\n    if (month < 1 || month > 12) {\n        throw new Error('Invalid Month');\n    }\n    if (date < 1 || date > 31) {\n        throw new Error('Invalid Date');\n    }\n    if ([4, 6, 9, 11].indexOf(month) != -1 && date > 30) {\n        throw new Error('Invalid Date');\n    }\n    if (month == 2) {\n        if (date > 29) {\n            throw new Error('Invalid Date');\n        } else {\n            let isLeap = false;\n            if (year % 400 == 0) {\n                isLeap = true\n            } else if (year % 4 == 0 && year % 100 != 0) {\n                isLeap = true;\n            }\n            if (!isLeap && date > 28) {\n                throw new Error('Invalid Date');\n            }\n        }\n    }\n}\n\nmodule.exports = {\n    base64ToBit,\n    checkDate,\n};","const { base64ToBit, checkDate } =  require('./utils');\n\n// 2bit代表日期 共48bit\n// 48bit -> base64  8个\n// 200年一共68种情况\nconst names = ['小寒', '大寒', '立春', '雨水', '惊蛰', '春分', '清明', '谷雨', '立夏', '小满', '芒种',\n    '夏至', '小暑', '大暑', '立秋', '处暑', '白露', '秋分', '寒露', '霜降', '立冬', '小雪', '大雪', '冬至'];\nconst baseDate = [4, 19, 3, 18, 4, 19, 4, 19, 4, 20, 4, 20, 6, 22, 6, 22, 6, 22, 7, 22, 6, 21, 6, 21];\n\nconst table = [];\n\nfunction decompressData() {\n    const codeStr = 'ABCDAECDAECDFGHIJKHILKMILABNOABNOAENOAENOAEPQRGSTUGSTLAVTOAWXOAWXOAYXOAYZOabcdebcQUfgThijkOilXOimXOimXOimcOnocdpqcQrsgktujkvumXvumXvumcvumcvwocxyqcz0sj10s213u243um43um53wm56wq567q589s+/0s~/3u~!3u@#3um';\n    const groupsStr = 'paaqmqqpqaquqqqqqvruruqq6qWaWZqlqaqqqqqqlaaqmqqppaaqqqqqqrququqqqqWaWZaVlaaampqlpaaqqqqplaWampqlqaququqqqqWZWZVVlaWaWZqlqqVZWZVVlaWaWZaVlaaqmpqpqmVZVZVVVaWaWZaVlaWampqpqlVZVZVVqVVZVVVVVaWZWZVVqVVVVVVVVaVZWZVVpaaqmpqpqVFVVVVVVaVZVZVVlaWaWZalpaaampqppVFVRVVVVWVZVZVVlaWaWpqlpVFVRVVUVVVZVVVVVaWZWZaVVFVZVVVVVFVVVVVVpVFVRUVUVFFVVVVVpVFFRUVUVFFVRVVVlVBFRUVUUFFVRVVVlVBFBEVUUFFVRVVUlVBFBEVQUFFFRUVUlVBFBEFQUFBFRUVUlVBEBEFAQFBFBEVUVVBEBEFAVVVVVVVVQFBFBEVQVVBEBEAAVVAEAEAAQFBFBEFQUFBFBUVUQFBEBEFAUFBFBEVUVQAEAAAAAFBEBEFAVQAAAAAAAFBEBEAAVAAAAAAAAFBEAEAA';\n    const groups = [];\n    for (let i = 0; i < groupsStr.length; i += 8) {\n        const groupBitStr = base64ToBit(groupsStr.substr(i, 8));\n        const group = [];\n        for (let j = 0; j < groupBitStr.length; j += 2) {\n            group.push(+`0b${groupBitStr.substr(j, 2)}`);\n        }\n        groups.push(group);\n    }\n    const codeMapStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/~!@#';\n    for (let i = 0; i < codeStr.length; i++) {\n        table.push(groups[codeMapStr.indexOf(codeStr[i])]);\n    }\n}\n\ndecompressData();\n\nfunction getSolarTerm(year, month, date) {\n    year = Math.floor(+year);\n    month = Math.floor(+month);\n    date = Math.floor(+date);\n    checkDate(year, month, date);\n    const index = (month - 1) * 2 + (date < 15 ? 0 : 1);\n    const d = baseDate[index] + table[year - 1901][index];\n    if (date == d) {\n        return names[index];\n    } else {\n        return null;\n    }\n}\n\nmodule.exports = { getSolarTerm };\n"]}